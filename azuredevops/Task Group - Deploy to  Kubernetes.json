{"tasks":[{"environment":{},"displayName":"Replace tokens in Kubernetes manifests with release configuration","alwaysRun":false,"continueOnError":false,"condition":"succeeded()","enabled":true,"timeoutInMinutes":0,"inputs":{"rootDirectory":"$(System.DefaultWorkingDirectory)/K8manifests/K8manifests","targetFiles":"*.yaml\n","encoding":"auto","writeBOM":"true","actionOnMissing":"warn","keepToken":"false","tokenPrefix":"#{","tokenSuffix":"}#","emptyValue":"(empty)","escapeChar":"","charsToEscape":""},"task":{"id":"a8515ec8-7254-4ffd-912c-86772e2b5962","versionSpec":"2.*","definitionType":"task"}},{"environment":{},"displayName":"Dump buildpack configuration to file","alwaysRun":false,"continueOnError":false,"condition":"succeeded()","enabled":true,"timeoutInMinutes":0,"inputs":{"targetType":"inline","filePath":"","arguments":"","script":"# Extract all env variables and output to env.variables.conf\n$varbuildpack = (gci env:BUILDPACK_*).GetEnumerator() | Sort-Object Name\n$varconstants = (gci env:CONSTANTS_*).GetEnumerator() | Sort-Object Name\n$out = \"\"\nForeach ($v in $varbuildpack) {$out = $out + \"`t{0}={1}`n\" -f $v.Name.Remove(0,10), $v.Value}\nForeach ($v in $varconstants) {$out = $out + \"`t{0}={1}`n\" -f $v.Name.Remove(0,10), $v.Value}\n \n$fileName = \"$env:SYSTEM_DEFAULTWORKINGDIRECTORY/K8manifests/K8manifests/env.variables.config\"\nset-content $fileName $out\nwrite-output \"dumped config in $fileName\"","errorActionPreference":"stop","failOnStderr":"false","ignoreLASTEXITCODE":"false","pwsh":"false","workingDirectory":""},"task":{"id":"e213ff0f-5d5c-4791-802d-52ea3e7be1f1","versionSpec":"2.*","definitionType":"task"}},{"environment":{},"displayName":"Create fixcasing script on agent","alwaysRun":false,"continueOnError":false,"condition":"succeeded()","enabled":true,"timeoutInMinutes":0,"inputs":{"fileoverwrite":"false","filepath":"$(System.DefaultWorkingDirectory)/fixcasing.js","filecontent":"const fs = require('fs');\nconst args = process.argv;\n\nif (args.length !== 5) {\n    console.log('Run as: node index.js <metadata.json> <output.config> <output.config>')\n    return;\n}\n\nconst variablesPath = args[3];\nconst metadataPath = args[2];\nconst outputPath = args[4];\n\ntry {\n    let variables = fs.readFileSync(variablesPath).toString();\n    const metadataFile = fs.readFileSync(metadataPath).toString();\n\n    const metadata = JSON.parse(metadataFile);\n\n    const mapping = {};\n\n    metadata['Constants'].forEach(c => {\n        const name = c.Name;\n        const newName = 'MX_' + name.replace(/\\./g, '_').toUpperCase();\n        const newNameOutput = 'MX_' + name.replace(/\\./g, '_');\n        mapping[newName] = newNameOutput;\n    });\n\n    Object.keys(mapping).forEach(key => {\n        variables = variables.replace(key, mapping[key]);\n    })\n\n    fs.writeFileSync(outputPath, variables);\n} catch (error) {\n    console.log(error);\n}\n"},"task":{"id":"1f81a8be-d8ce-497d-9791-190126f661e7","versionSpec":"1.*","definitionType":"task"}},{"environment":{},"displayName":"Fix casing of constants","alwaysRun":false,"continueOnError":false,"condition":"succeeded()","enabled":true,"timeoutInMinutes":0,"inputs":{"script":"node $(System.DefaultWorkingDirectory)/fixcasing.js  $(System.DefaultWorkingDirectory)/DockerBuild/DockerBuild/metadata.json $(System.DefaultWorkingDirectory)/K8manifests/K8manifests/env.variables.config $(System.DefaultWorkingDirectory)/K8manifests/K8manifests/env.variables.config","workingDirectory":"","failOnStderr":"false"},"task":{"id":"d9bafed4-0b18-4f58-968d-86655b4d2ce9","versionSpec":"2.*","definitionType":"task"}},{"environment":{},"displayName":"Output all Kubernetes manifests for debugging purposes","alwaysRun":false,"continueOnError":false,"condition":"succeeded()","enabled":false,"timeoutInMinutes":0,"inputs":{"script":"tail -v -n +1 $(System.DefaultWorkingDirectory)/K8manifests/K8manifests/*","workingDirectory":"","failOnStderr":"false"},"task":{"id":"d9bafed4-0b18-4f58-968d-86655b4d2ce9","versionSpec":"2.*","definitionType":"task"}},{"environment":{},"displayName":"Delete any existing ConfigMap from Kubernetes cluster","alwaysRun":false,"continueOnError":true,"condition":"succeeded()","enabled":true,"timeoutInMinutes":0,"inputs":{"kubernetesServiceEndpoint":"$(Kubernetes_Cluster)","namespace":"$(Kubernetes_Namespace)","command":"delete","useConfigurationFile":"false","configuration":"","arguments":"configmap mendix-config","secretType":"dockerRegistry","secretArguments":"","containerRegistryType":"Azure Container Registry","dockerRegistryEndpoint":"","azureSubscriptionEndpoint":"","azureContainerRegistry":"","secretName":"","forceUpdate":"true","configMapName":"","forceUpdateConfigMap":"false","useConfigMapFile":"false","configMapFile":"$(System.DefaultWorkingDirectory)/K8manifests/K8manifests/variables.config","configMapArguments":"","versionOrLocation":"version","versionSpec":"1.10.5","checkLatest":"false","specifyLocation":"","cwd":"$(System.DefaultWorkingDirectory)","outputFormat":"json","kubectlOutput":""},"task":{"id":"cbc316a2-586f-4def-be79-488a1f503564","versionSpec":"0.*","definitionType":"task"}},{"environment":{},"displayName":"Deploy ConfigMap to Kubernetes cluster","alwaysRun":false,"continueOnError":false,"condition":"succeeded()","enabled":true,"timeoutInMinutes":0,"inputs":{"kubernetesServiceEndpoint":"$(Kubernetes_Cluster)","namespace":"$(Kubernetes_Namespace)","command":"create","useConfigurationFile":"false","configuration":"","arguments":"configmap mendix-config --from-env-file=$(System.DefaultWorkingDirectory)/K8manifests/K8manifests/env.variables.config","secretType":"dockerRegistry","secretArguments":"","containerRegistryType":"Azure Container Registry","dockerRegistryEndpoint":"","azureSubscriptionEndpoint":"","azureContainerRegistry":"","secretName":"","forceUpdate":"true","configMapName":"","forceUpdateConfigMap":"false","useConfigMapFile":"false","configMapFile":"$(System.DefaultWorkingDirectory)/K8manifests/K8manifests/variables.config","configMapArguments":"","versionOrLocation":"version","versionSpec":"1.10.5","checkLatest":"false","specifyLocation":"","cwd":"$(System.DefaultWorkingDirectory)","outputFormat":"json","kubectlOutput":""},"task":{"id":"cbc316a2-586f-4def-be79-488a1f503564","versionSpec":"0.*","definitionType":"task"}},{"environment":{},"displayName":"Deploy app to Kubernetes cluster","alwaysRun":false,"continueOnError":false,"condition":"succeeded()","enabled":true,"timeoutInMinutes":0,"inputs":{"kubernetesServiceEndpoint":"$(Kubernetes_Cluster)","namespace":"$(Kubernetes_Namespace)","command":"apply","useConfigurationFile":"true","configuration":"$(System.DefaultWorkingDirectory)/K8manifests/K8manifests/kubernetes.yaml","arguments":"","secretType":"dockerRegistry","secretArguments":"","containerRegistryType":"Azure Container Registry","dockerRegistryEndpoint":"","azureSubscriptionEndpoint":"1a41c7c9-b782-4943-b5e6-fce1fabeaa83","azureContainerRegistry":"{\"loginServer\":\"mxcicdrefregistry.azurecr.io\", \"id\" : \"/subscriptions/de0fa306-feb3-43a2-9782-d09d4a4970d0/resourceGroups/mx-cicd-demo-support-resources/providers/Microsoft.ContainerRegistry/registries/mxcicdrefregistry\"}","secretName":"registry","forceUpdate":"true","configMapName":"","forceUpdateConfigMap":"false","useConfigMapFile":"false","configMapFile":"$(System.DefaultWorkingDirectory)/K8manifests/K8manifests/variables.config","configMapArguments":"","versionOrLocation":"version","versionSpec":"1.10.5","checkLatest":"false","specifyLocation":"","cwd":"$(System.DefaultWorkingDirectory)","outputFormat":"json","kubectlOutput":""},"task":{"id":"cbc316a2-586f-4def-be79-488a1f503564","versionSpec":"0.*","definitionType":"task"}},{"environment":{},"displayName":"Deploy ingress to Kubernetes cluster","alwaysRun":false,"continueOnError":false,"condition":"succeeded()","enabled":true,"timeoutInMinutes":0,"inputs":{"kubernetesServiceEndpoint":"$(Kubernetes_Cluster)","namespace":"$(Kubernetes_Namespace)","command":"apply","useConfigurationFile":"true","configuration":"$(System.DefaultWorkingDirectory)/K8manifests/K8manifests/ingress.yaml","arguments":"","secretType":"dockerRegistry","secretArguments":"","containerRegistryType":"Azure Container Registry","dockerRegistryEndpoint":"","azureSubscriptionEndpoint":"1a41c7c9-b782-4943-b5e6-fce1fabeaa83","azureContainerRegistry":"{\"loginServer\":\"mxcicdrefregistry.azurecr.io\", \"id\" : \"/subscriptions/de0fa306-feb3-43a2-9782-d09d4a4970d0/resourceGroups/mx-cicd-demo-support-resources/providers/Microsoft.ContainerRegistry/registries/mxcicdrefregistry\"}","secretName":"registry","forceUpdate":"true","configMapName":"","forceUpdateConfigMap":"false","useConfigMapFile":"false","configMapFile":"","configMapArguments":"","versionOrLocation":"version","versionSpec":"1.10.5","checkLatest":"false","specifyLocation":"","cwd":"$(System.DefaultWorkingDirectory)","outputFormat":"json","kubectlOutput":""},"task":{"id":"cbc316a2-586f-4def-be79-488a1f503564","versionSpec":"0.*","definitionType":"task"}}],"runsOn":["Agent","DeploymentGroup"],"revision":5,"createdBy":{"displayName":"Clyde Waal","id":"5e6f18bd-a1df-60fc-8d14-e20571de9c60","uniqueName":"clyde.waal@Mendix.com"},"createdOn":"2018-07-30T14:32:27.760Z","modifiedBy":{"displayName":"Clyde Waal","id":"5e6f18bd-a1df-60fc-8d14-e20571de9c60","uniqueName":"clyde.waal@Mendix.com"},"modifiedOn":"2019-02-20T19:18:10.140Z","comment":"","id":"07b76193-0063-45b4-b100-ef9442417a16","name":"Deploy to  Kubernetes","version":{"major":1,"minor":0,"patch":0,"isTest":false},"iconUrl":"/_static/tfs/20180727T152755/_content/icon-meta-task.png","friendlyName":"Deploy to  Kubernetes","description":"","category":"Deploy","definitionType":"metaTask","author":"Clyde Waal","demands":[],"groups":[],"inputs":[{"aliases":[],"options":{},"properties":{},"name":"Kubernetes_Cluster","label":"Kubernetes_Cluster","defaultValue":"","required":true,"type":"connectedService:kubernetes","helpMarkDown":"Select a Kubernetes service connection.","groupName":""},{"aliases":[],"options":{},"properties":{},"name":"Kubernetes_Namespace","label":"Kubernetes_Namespace","defaultValue":"","required":true,"type":"string","helpMarkDown":"Set the namespace for the kubectl command by using the –namespace flag. If the namespace is not provided, the commands will run in the default namespace.","groupName":""}],"satisfies":[],"sourceDefinitions":[],"dataSourceBindings":[],"instanceNameFormat":"Task group: Deploy to  Kubernetes $(Kubernetes_Cluster)","preJobExecution":{},"execution":{},"postJobExecution":{}}
